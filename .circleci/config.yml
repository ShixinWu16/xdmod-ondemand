# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1
executors:
  centos7: &centos7-executor
    docker:
      - image: centos:7
  rocky8: &rocky8-executor
    docker:
      - image: rockylinux:8
  alma8: &alma8-executor
    docker:
      - image: almalinux:8
  rocky9: &rocky9-executor
    docker:
      - image: rockylinux:9
  alma9: &alma9-executor
    docker:
      - image: almalinux:9
  ubuntu20_04: &ubuntu20_04-executor
    docker:
      - image: ubuntu:20.04
  ubuntu22_04: &ubuntu22_04-executor
    docker:
      - image: ubuntu:22.04
jobs:
  build:
    parameters:
      install-type:
        type: string
    docker:
      # The first image entry here will be used as the image for the parent container.
      - image: tools-ext-01.ccr.xdmod.org/xdmod-10.0.0:centos7.9-0.6
    environment:
      COMPOSER_ALLOW_SUPERUSER: 1
      XDMOD_REALMS: 'jobs,storage,cloud'
      XDMOD_IS_CORE: 'yes'
      XDMOD_INSTALL_DIR: /xdmod
      XDMOD_TEST_MODE: << parameters.install-type >>
      XDMOD_SRC_DIR:  ./../xdmod
      REG_TEST_BASE: /../../../../../project/tests/artifacts/regression/current
    steps:
      - checkout
      - run:
          name: Checkout XDMoD
          command: |
            git clone --depth=1 --branch=xdmod10.5 https://github.com/ubccr/xdmod.git $XDMOD_SRC_DIR
      - run:
          name: Link the module into the XDMoD Source Directory
          command: |
              ln -s `pwd` $XDMOD_SRC_DIR/open_xdmod/modules/ondemand
      - run:
          name: Install XDMoD Dependencies
          command: composer install -d $XDMOD_SRC_DIR --no-progress
      - run:
          name: Setup Environment Variables
          command: |
            echo "export XDMOD_SOURCE_DIR=${CIRCLE_WORKING_DIRECTORY}/${XDMOD_SRC_DIR}" >> $BASH_ENV
            echo "export SHIPPABLE_BUILD_DIR=${CIRCLE_WORKING_DIRECTORY}" >> $BASH_ENV
      - run:
          name: Build RPMS
          command: |
            pushd $XDMOD_SRC_DIR
            ~/bin/buildrpm xdmod ondemand
            popd
      - run:
          name: Install / Upgrade XDMoD from RPM
          command: ./tests/scripts/bootstrap.sh
      - store_artifacts:
          path: /var/log/xdmod
  test-export-tool:
    parameters:
      os:
        type: executor
    executor: << parameters.os >>
    environment:
      VENV_DIR: /root/xdmod-ondemand-export/env
    steps:
      - when:
          condition:
            equal: [ *centos7-executor, << parameters.os >> ]
          steps:
            - run:
                # This step is needed to make sure the test artifacts are checked out.
                name: Install Git
                command: yum install git -y
      - when:
          condition:
            or:
              - equal: [ *rocky8-executor, << parameters.os >> ]
              - equal: [ *alma8-executor, << parameters.os >> ]
              - equal: [ *rocky9-executor, << parameters.os >> ]
              - equal: [ *alma9-executor, << parameters.os >> ]
          steps:
            - run:
                # This step is needed to make sure the test artifacts are checked out.
                name: Install Git
                command: dnf install git -y
      - checkout
      # Steps below come from https://osc.github.io/ood-documentation/latest/installation/install-software.html
      - when:
          condition:
            equal: [ *centos7-executor, << parameters.os >> ]
          steps:
            - run:
                name: Install OnDemand dependencies
                command: |
                  yum install centos-release-scl epel-release -y
      - when:
          condition:
            or:
              - equal: [ *rocky8-executor, << parameters.os >> ]
              - equal: [ *alma8-executor, << parameters.os >> ]
          steps:
            - run:
                name: Install OnDemand dependencies
                command: |
                  dnf install 'dnf-command(config-manager)' -y
                  dnf config-manager --set-enabled powertools
                  dnf install epel-release -y
                  dnf module enable ruby:3.0 nodejs:14 -y
      - when:
          condition:
            or:
              - equal: [ *rocky9-executor, << parameters.os >> ]
              - equal: [ *alma9-executor, << parameters.os >> ]
          steps:
            - run:
                name: Install OnDemand dependencies
                command: |
                  dnf install 'dnf-command(config-manager)' -y
                  dnf config-manager --set-enabled crb
                  dnf install epel-release -y
      - when:
          condition:
            or:
              - equal: [ *centos7-executor, << parameters.os >> ]
              - equal: [ *rocky8-executor, << parameters.os >> ]
              - equal: [ *alma8-executor, << parameters.os >> ]
              - equal: [ *rocky9-executor, << parameters.os >> ]
              - equal: [ *alma9-executor, << parameters.os >> ]
          steps:
              - run:
                  name: Install OnDemand
                  command: |
                    yum install https://yum.osc.edu/ondemand/3.0/ondemand-release-web-3.0-1.noarch.rpm -y
                    yum install ondemand -y
      - when:
          condition:
            or:
              - equal: [ *ubuntu20_04-executor, << parameters.os >> ]
              - equal: [ *ubuntu22_04-executor, << parameters.os >> ]
          steps:
            - run:
                name: Install OnDemand
                command: |
                  apt update
                  apt install apt-transport-https ca-certificates -y
                  apt install wget -y
                  wget -O /tmp/ondemand-release-web_3.0.0_all.deb https://apt.osc.edu/ondemand/3.0/ondemand-release-web_3.0.0_all.deb
                  apt install /tmp/ondemand-release-web_3.0.0_all.deb
                  apt update
                  DEBIAN_FRONTEND=noninteractive TZ=US/Eastern apt install ondemand -y
                  python_version=$(python3 --version | awk '{print $2}' | cut -d'.' -f1-2)
                  apt install python${python_version}-venv -y
      - run:
          name: Create virtual environment for pip installs
          command: python3 -m venv ${VENV_DIR}
      - run:
          name: Lint
          command: |
            cd tools/xdmod-ondemand-export
            source ${VENV_DIR}/bin/activate
            python3 -m pip install flake8
            flake8 xdmod_ondemand_export/xdmod_ondemand_export.py tests/
      - run:
          name: Build wheel and run tests
          command: |
            cd tools/xdmod-ondemand-export
            source ${VENV_DIR}/bin/activate
            python3 -m pip install --upgrade pip build setuptools pytest
            python3 -m build --wheel
            python3 -m pip install dist/xdmod_ondemand_export-*-py3-none-any.whl
            timeout 1m python3 -m pytest -v tests/test.py

workflows:
  full-build:
    jobs:
      - build:
          matrix:
            parameters:
              install-type: ["fresh_install", "upgrade"]
      - test-export-tool:
          matrix:
            parameters:
              os:
                - centos7
                - rocky8
                - alma8
                - rocky9
                - alma9
                - ubuntu20_04
                - ubuntu22_04
